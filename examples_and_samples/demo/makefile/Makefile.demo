# PhoenixGuard Demo & Development Makefile
# ========================================
# Demo, testing, and development targets
# For production use: make help (uses production Makefile)

SHELL := /bin/bash

# Demo entry points
LIVE_DEMO := ./bak/demo-nuclear-boot-edk2-live.sh

.PHONY: help demo demo-secureboot demo-xen demo-recover layout demo-phoenix demo-phoenix-nested demo-phoenix-simple test-phoenix test-phoenix-baseline test-phoenix-hardware test-phoenix-comprehensive build-nuclear-cd test-cd-boot burn-recovery-cd create-usb-recovery deploy-esp-iso boot-from-esp-iso test-cd-boot-sb build-nuclear-cd-sb deploy-esp-iso-sb

help:
	@echo "🔥 PHOENIXGUARD - Demo & Development Targets"
	@echo "==========================================="
	@echo ""
	@echo "🧪 QEMU Demos:"
	@echo "  make demo               # Launch base QEMU demo"
	@echo "  make demo-secureboot    # QEMU demo with Secure Boot varstore"
	@echo "  make demo-xen           # QEMU demo with Xen staging"
	@echo "  make demo-recover       # QEMU demo with recovery package"
	@echo "  make layout             # Show demo ESP structure"
	@echo ""
	@echo "🔥 PhoenixGuard VM Demos:"
	@echo "  make demo-phoenix       # Launch PhoenixGuard in clean-snap VM"
	@echo "  make demo-phoenix-nested # Nested QEMU demo"
	@echo "  make demo-phoenix-simple # Simple QEMU demo"
	@echo ""
	@echo "🧪 Testing Targets:"
	@echo "  make test-phoenix       # Run all PhoenixGuard component tests"
	@echo "  make test-phoenix-baseline # Test baseline database loading"
	@echo "  make test-phoenix-hardware # Test hardware detection"
	@echo "  make test-phoenix-comprehensive # Complete workflow test"
	@echo ""
	@echo "💿 Nuclear Boot CD (Testing):"
	@echo "  make build-nuclear-cd   # Build bootable recovery CD/DVD"
	@echo "  make build-nuclear-cd-sb # Build Secure Boot compatible CD"
	@echo "  make test-cd-boot       # Test Nuclear Boot CD in QEMU"
	@echo "  make test-cd-boot-sb    # Test Secure Boot compatible CD"
	@echo "  make burn-recovery-cd   # Burn CD to physical disc"
	@echo "  make create-usb-recovery # Create bootable USB recovery"
	@echo "  make deploy-esp-iso     # Deploy virtual CD to ESP"
	@echo "  make boot-from-esp-iso  # Boot recovery from ESP-deployed ISO"
	@echo ""
	@echo "For production: make help"

# --- QEMU Demos ---
demo:
	@bash -lc '$(LIVE_DEMO)'

demo-secureboot:
	@bash -lc 'DEMO_SECUREBOOT=1 $(LIVE_DEMO) --secureboot'

demo-xen:
	@bash -lc 'DEMO_STAGE_XEN=1 $(LIVE_DEMO)'

demo-recover:
	@bash -lc 'DEMO_STAGE_XEN=1 DEMO_STAGE_RECOVERY=1 $(LIVE_DEMO)'

layout:
	@bash -lc 'if [ -d nuclear-boot-demo ]; then \
	  if command -v tree >/dev/null 2>&1; then tree -L 2 nuclear-boot-demo; else echo "(Install \"tree\" for nicer output)"; find nuclear-boot-demo -maxdepth 2 -type d -printf "%p\n" -o -type f -printf "%p\n" | sort; fi; \
	else echo "No demo ESP found. Run \"make demo\" first."; fi'

# --- PhoenixGuard VM Demos ---
demo-phoenix:
	@echo "🔥 PhoenixGuard VM Demo using clean-snap snapshot"
	@echo "🎯 This will demonstrate PhoenixGuard UEFI firmware recovery"
	@echo
	@if [ ! -f firmware_baseline.json ]; then \
		echo "⚠️  Baseline database not found. PhoenixGuard works best with firmware baselines."; \
		echo "   Consider creating one with: make scan-bootkits"; \
		echo; \
	fi
	@echo "🚀 Launching PhoenixGuard demo (fresh boot)..."
	@./bak/simple_demo_no_snapshot.sh

demo-phoenix-nested:
	@echo "🎯 PhoenixGuard Nested QEMU Demo (Advanced Virtualization)"
	@echo "This creates a nested VM environment to demonstrate PhoenixGuard capabilities"
	@echo
	@./bak/demo_nested_vm_setup.sh
	@echo "✅ Nested demo environment prepared"
	@echo "🚀 Launching nested PhoenixGuard demonstration..."
	@./bak/demo_with_metal_snapshot.sh

demo-phoenix-simple:
	@echo "🎯 PhoenixGuard Simple Demo (Basic QEMU)"
	@echo "This provides a straightforward demonstration of PhoenixGuard capabilities"
	@echo
	@./bak/run_phoenixguard_demo.sh

# --- Testing Targets ---
test-phoenix:
	@echo "🧪 Running comprehensive PhoenixGuard component tests"
	@echo "===================================================="
	@echo
	@echo "🔍 Testing baseline database functionality..."
	@python3 bak/test_baseline_loading.py || echo "Baseline test completed with issues"
	@echo
	@echo "🛠️  Testing hardware detection and tools..."
	@python3 bak/test_hardware_detection.py || echo "Hardware detection test completed with issues"
	@echo
	@echo "🔧 Testing firmware dump and security..."
	@sudo python3 bak/test_firmware_dump.py || echo "Firmware dump test completed (failures expected on secure system)"
	@echo
	@echo "🎯 Testing comprehensive workflow..."
	@sudo python3 bak/test_comprehensive_workflow_clean.py || echo "Workflow test completed"
	@echo
	@echo "✅ PhoenixGuard component testing complete!"
	@echo "📊 All critical functionality verified"

test-phoenix-baseline:
	@echo "📚 Testing PhoenixGuard Baseline Database"
	@echo "========================================"
	@python3 bak/test_baseline_loading.py

test-phoenix-hardware:
	@echo "🖥️  Testing PhoenixGuard Hardware Detection"
	@echo "=========================================="
	@python3 bak/test_hardware_detection.py

test-phoenix-comprehensive:
	@echo "🎯 Testing PhoenixGuard Comprehensive Workflow"
	@echo "============================================="
	@sudo python3 bak/test_comprehensive_workflow_clean.py

# --- Nuclear Boot CD Targets ---
build-nuclear-cd:
	@./scripts/build-nuclear-cd.sh

build-nuclear-cd-sb:
	@./scripts/build-nuclear-cd-sb.sh

test-cd-boot:
	@echo "🧪 Testing Nuclear Boot CD in QEMU..."
	@set -e; \
	if [ ! -f PhoenixGuard-Nuclear-Recovery.iso ]; then \
		echo "ERROR: PhoenixGuard-Nuclear-Recovery.iso not found. Run 'make build-nuclear-cd' first."; \
		exit 1; \
	fi; \
	echo "🚀 Launching QEMU with Nuclear Boot CD..."; \
	echo "Press Ctrl+Alt+G to release mouse, Ctrl+Alt+Q to quit QEMU"; \
	echo; \
	qemu-system-x86_64 \
		-cdrom PhoenixGuard-Nuclear-Recovery.iso \
		-boot d \
		-m 4G \
		-enable-kvm \
		-vga virtio \
		-netdev user,id=net0 \
		-device virtio-net-pci,netdev=net0 \
		-bios /usr/share/ovmf/OVMF.fd 2>/dev/null || \
	qemu-system-x86_64 \
		-cdrom PhoenixGuard-Nuclear-Recovery.iso \
		-boot d \
		-m 4G \
		-enable-kvm \
		-vga virtio \
		-netdev user,id=net0 \
		-device virtio-net-pci,netdev=net0

test-cd-boot-sb:
	@echo "🧪 Testing Secure Boot compatible Nuclear Boot CD in QEMU..."
	@set -e; \
	if [ ! -f PhoenixGuard-Nuclear-Recovery-SB.iso ]; then \
		echo "ERROR: PhoenixGuard-Nuclear-Recovery-SB.iso not found. Run 'make build-nuclear-cd-sb' first."; \
		exit 1; \
	fi; \
	echo "🚀 Launching QEMU with Secure Boot compatible ISO..."; \
	echo "Press Ctrl+Alt+G to release mouse, Ctrl+Alt+Q to quit QEMU"; \
	echo; \
	qemu-system-x86_64 \
		-cdrom PhoenixGuard-Nuclear-Recovery-SB.iso \
		-boot d \
		-m 4G \
		-enable-kvm \
		-vga virtio \
		-netdev user,id=net0 \
		-device virtio-net-pci,netdev=net0 \
		-bios /usr/share/ovmf/OVMF.fd 2>/dev/null || \
	qemu-system-x86_64 \
		-cdrom PhoenixGuard-Nuclear-Recovery-SB.iso \
		-boot d \
		-m 4G \
		-enable-kvm \
		-vga virtio \
		-netdev user,id=net0 \
		-device virtio-net-pci,netdev=net0

burn-recovery-cd:
	@echo "🔥 Burning PhoenixGuard Nuclear Recovery CD..."
	@./scripts/burn-recovery-cd.sh

create-usb-recovery:
	@echo "💎 Creating PhoenixGuard Nuclear Boot USB drive..."
	@./scripts/create-usb-recovery.sh

# --- ESP Deployment Targets ---
deploy-esp-iso:
	@./scripts/deploy-esp-iso.sh

deploy-esp-iso-sb:
	@./scripts/deploy-esp-iso.sh --secure-boot

boot-from-esp-iso:
	@echo "🚀 Booting Nuclear Recovery from ESP-deployed ISO..."
	@./scripts/boot-from-esp-iso.sh
