searchState.loadedDescShard("volatile", 0, "Provides the wrapper type <code>Volatile</code>, which wraps a …\nWraps a reference to make accesses to the referenced value …\nAllows creating read-only and write-only <code>Volatile</code> values.\nConverts a mutable array reference to a mutable slice.\nConverts an array reference to a shared slice.\nExtracts the inner value stored in the wrapper type.\nReturns the argument unchanged.\nApplies the index operation on the wrapped slice.\nApplies the mutable index operation on the wrapped slice.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>Volatile</code> reference by mapping the wrapped …\nConstructs a new mutable <code>Volatile</code> reference by mapping the …\nConstructs a new volatile instance wrapping the given …\nConstructs a new read-only volatile instance wrapping the …\nConstructs a new write-only volatile instance wrapping the …\nPerforms a volatile read of the contained value.\nRestricts access permissions to read-only.\nUpdates the contained value using the given closure and …\nPerforms a volatile write, setting the contained value to …\nRestricts access permissions to write-only.\nZero-sized marker type for allowing only read access.\nZero-sized marker type for allowing both read and write …\nHelper trait that is implemented by <code>ReadWrite</code> and <code>ReadOnly</code>.\nHelper trait that is implemented by <code>ReadWrite</code> and <code>WriteOnly</code>…\nZero-sized marker type for allowing only write access.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")