searchState.loadedDescShard("bootloader_api", 0, "Provides the interface to make kernels compatible with the …\nAllows to configure the system environment set up by the …\nDefines the entry point function.\nContains the boot information struct sent by the …\nA semver-compatible version.\nAllows configuring the bootloader behavior.\nLook for an unused virtual memory region at runtime.\nTry to map the region at the given virtual address.\nConfiguration for the frame buffer used for graphical …\nSpecifies how the bootloader should map a memory region …\nAllows to configure the virtual memory mappings created by …\nWhether to randomize non-statically configured addresses. …\nSpecifies where the <code>crate::BootInfo</code> struct should be …\nTries to deserialize a config byte array that was created …\nThe highest virtual address for dynamic addresses.\nThe lowest virtual address for dynamic addresses.\nConfiguration for the frame buffer that can be used by the …\nSpecifies the mapping of the frame buffer memory region.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigures the base address of the kernel.\nConfigures how the kernel stack should be mapped.\nThe size of the stack that the bootloader should allocate …\nConfiguration for (optional) page table mappings created …\nInstructs the bootloader to set up a framebuffer format …\nInstructs the bootloader to set up a framebuffer format …\nCreates a new default configuration with the following …\nCreates a new mapping configuration with dynamic mapping …\nCreates a new <code>Mapping::Dynamic</code>.\nCreates a default configuration without any requirements.\nAs an alternative to mapping the whole physical memory …\nThe bootloader supports mapping the whole physical memory …\nReturns whether this version is a pre-release, e.g., an …\nVirtual address to map ramdisk image, if present on disk …\nSerializes the configuration to a byte array.\nReturns the major version number.\nReturns the minor version number.\nReturns the patch version number.\nOne byte blue, then one byte green, then one byte red.\nThis structure represents the information that the …\nMemory mappings created by the bootloader, including the …\nA pixel-based framebuffer that controls the screen output.\nDescribes the layout and pixel format of a framebuffer.\nRepresent a physical memory region.\nRepresents the different types of memory.\nFFI-safe slice of <code>MemoryRegion</code> structs, semantically …\nNo value\nFFI-safe variant of <code>Option</code>.\nColor format of pixels in the framebuffer.\nOne byte red, then one byte green, then one byte blue.\nSome value <code>T</code>\nInformation about the thread local storage (TLS) template.\nA single byte, representing the grayscale value.\nUnknown pixel format.\nAn unknown memory region reported by the BIOS firmware.\nAn unknown memory region reported by the UEFI firmware.\nUnused conventional memory, can be used by the kernel.\nThe version of the <code>bootloader_api</code> crate. Must match the …\nConverts from <code>&amp;mut Optional&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;Optional&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.\nReturns the raw bytes of the framebuffer as slice.\nReturns the raw bytes of the framebuffer as mutable slice.\nThe total size in bytes.\nThe number of bytes per pixel.\nCreates a new empty memory region (with length 0).\nThe physical end address (exclusive) of the region.\nThe number of data bytes in the template.\nInformation about the framebuffer for screen output if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height in pixels.\nReturns layout and pixel format information of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the frame buffer to a raw byte slice.\nConverts the <code>Optional</code> to an <code>Option</code>.\nPhysical address of the kernel ELF in memory.\nVirtual address of the loaded kernel image.\nSize of the kernel ELF in memory.\nThe memory type of the memory region.\nThe total number of bytes that the TLS segment should have …\nA map of the physical memory regions of the underlying …\nCreate a new boot info structure with the given memory map.\nCreates a new framebuffer instance.\nThe virtual address at which the mapping of the physical …\nThe color format of each pixel.\nRamdisk address, if loaded\nRamdisk image size, set to 0 if addr is None\nThe virtual address of the recursively mapped level 4 page …\nThe address of the <code>RSDP</code> data structure, which can be use …\nThe physical start address of the region.\nThe virtual start address of the thread local storage …\nNumber of pixels between the start of a line and the start …\nTakes the value out of the <code>Optional</code>, leaving a <code>None</code> in its …\nThe thread local storage (TLS) template of the kernel …\nThe width in pixels.\nBit offset of the blue value.\nBit offset of the green value.\nBit offset of the red value.")